// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  CallReducerFlags,
  ConnectionId,
  DbConnectionBuilder,
  DbConnectionImpl,
  DbContext,
  ErrorContextInterface,
  Event,
  EventContextInterface,
  Identity,
  ProductType,
  ProductTypeElement,
  ReducerEventContextInterface,
  SubscriptionBuilderImpl,
  SubscriptionEventContextInterface,
  SumType,
  SumTypeVariant,
  TableCache,
  TimeDuration,
  Timestamp,
  deepEqual,
} from "@clockworklabs/spacetimedb-sdk";

// Import and reexport all reducer arg types
import { AddActivity } from "./add_activity_reducer.ts";
export { AddActivity };
import { AddCategory } from "./add_category_reducer.ts";
export { AddCategory };
import { LogEntry } from "./log_entry_reducer.ts";
export { LogEntry };

// Import and reexport all table handle types
import { ActivityTableHandle } from "./activity_table.ts";
export { ActivityTableHandle };
import { CategoryTableHandle } from "./category_table.ts";
export { CategoryTableHandle };
import { EntryTableHandle } from "./entry_table.ts";
export { EntryTableHandle };
import { EntryActivityTableHandle } from "./entry_activity_table.ts";
export { EntryActivityTableHandle };
import { UserTableHandle } from "./user_table.ts";
export { UserTableHandle };

// Import and reexport all types
import { Activity } from "./activity_type.ts";
export { Activity };
import { Category } from "./category_type.ts";
export { Category };
import { Entry } from "./entry_type.ts";
export { Entry };
import { EntryActivity } from "./entry_activity_type.ts";
export { EntryActivity };
import { SubscriberTier } from "./subscriber_tier_type.ts";
export { SubscriberTier };
import { User } from "./user_type.ts";
export { User };

const REMOTE_MODULE = {
  tables: {
    Activity: {
      tableName: "Activity",
      rowType: Activity.getTypeScriptAlgebraicType(),
      primaryKey: "id",
    },
    Category: {
      tableName: "Category",
      rowType: Category.getTypeScriptAlgebraicType(),
      primaryKey: "id",
    },
    Entry: {
      tableName: "Entry",
      rowType: Entry.getTypeScriptAlgebraicType(),
      primaryKey: "id",
    },
    EntryActivity: {
      tableName: "EntryActivity",
      rowType: EntryActivity.getTypeScriptAlgebraicType(),
    },
    User: {
      tableName: "User",
      rowType: User.getTypeScriptAlgebraicType(),
      primaryKey: "id",
    },
  },
  reducers: {
    AddActivity: {
      reducerName: "AddActivity",
      argsType: AddActivity.getTypeScriptAlgebraicType(),
    },
    AddCategory: {
      reducerName: "AddCategory",
      argsType: AddCategory.getTypeScriptAlgebraicType(),
    },
    LogEntry: {
      reducerName: "LogEntry",
      argsType: LogEntry.getTypeScriptAlgebraicType(),
    },
  },
  // Constructors which are used by the DbConnectionImpl to
  // extract type information from the generated RemoteModule.
  //
  // NOTE: This is not strictly necessary for `eventContextConstructor` because
  // all we do is build a TypeScript object which we could have done inside the
  // SDK, but if in the future we wanted to create a class this would be
  // necessary because classes have methods, so we'll keep it.
  eventContextConstructor: (imp: DbConnectionImpl, event: Event<Reducer>) => {
    return {
      ...(imp as DbConnection),
      event
    }
  },
  dbViewConstructor: (imp: DbConnectionImpl) => {
    return new RemoteTables(imp);
  },
  reducersConstructor: (imp: DbConnectionImpl, setReducerFlags: SetReducerFlags) => {
    return new RemoteReducers(imp, setReducerFlags);
  },
  setReducerFlagsConstructor: () => {
    return new SetReducerFlags();
  }
}

// A type representing all the possible variants of a reducer.
export type Reducer = never
| { name: "AddActivity", args: AddActivity }
| { name: "AddCategory", args: AddCategory }
| { name: "LogEntry", args: LogEntry }
;

export class RemoteReducers {
  constructor(private connection: DbConnectionImpl, private setCallReducerFlags: SetReducerFlags) {}

  addActivity(name: string, categoryId: bigint) {
    const __args = { name, categoryId };
    let __writer = new BinaryWriter(1024);
    AddActivity.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("AddActivity", __argsBuffer, this.setCallReducerFlags.addActivityFlags);
  }

  onAddActivity(callback: (ctx: ReducerEventContext, name: string, categoryId: bigint) => void) {
    this.connection.onReducer("AddActivity", callback);
  }

  removeOnAddActivity(callback: (ctx: ReducerEventContext, name: string, categoryId: bigint) => void) {
    this.connection.offReducer("AddActivity", callback);
  }

  addCategory(name: string) {
    const __args = { name };
    let __writer = new BinaryWriter(1024);
    AddCategory.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("AddCategory", __argsBuffer, this.setCallReducerFlags.addCategoryFlags);
  }

  onAddCategory(callback: (ctx: ReducerEventContext, name: string) => void) {
    this.connection.onReducer("AddCategory", callback);
  }

  removeOnAddCategory(callback: (ctx: ReducerEventContext, name: string) => void) {
    this.connection.offReducer("AddCategory", callback);
  }

  logEntry(time: Timestamp, recordedTime: Timestamp, activities: string[]) {
    const __args = { time, recordedTime, activities };
    let __writer = new BinaryWriter(1024);
    LogEntry.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("LogEntry", __argsBuffer, this.setCallReducerFlags.logEntryFlags);
  }

  onLogEntry(callback: (ctx: ReducerEventContext, time: Timestamp, recordedTime: Timestamp, activities: string[]) => void) {
    this.connection.onReducer("LogEntry", callback);
  }

  removeOnLogEntry(callback: (ctx: ReducerEventContext, time: Timestamp, recordedTime: Timestamp, activities: string[]) => void) {
    this.connection.offReducer("LogEntry", callback);
  }

}

export class SetReducerFlags {
  addActivityFlags: CallReducerFlags = 'FullUpdate';
  addActivity(flags: CallReducerFlags) {
    this.addActivityFlags = flags;
  }

  addCategoryFlags: CallReducerFlags = 'FullUpdate';
  addCategory(flags: CallReducerFlags) {
    this.addCategoryFlags = flags;
  }

  logEntryFlags: CallReducerFlags = 'FullUpdate';
  logEntry(flags: CallReducerFlags) {
    this.logEntryFlags = flags;
  }

}

export class RemoteTables {
  constructor(private connection: DbConnectionImpl) {}

  get activity(): ActivityTableHandle {
    return new ActivityTableHandle(this.connection.clientCache.getOrCreateTable<Activity>(REMOTE_MODULE.tables.Activity));
  }

  get category(): CategoryTableHandle {
    return new CategoryTableHandle(this.connection.clientCache.getOrCreateTable<Category>(REMOTE_MODULE.tables.Category));
  }

  get entry(): EntryTableHandle {
    return new EntryTableHandle(this.connection.clientCache.getOrCreateTable<Entry>(REMOTE_MODULE.tables.Entry));
  }

  get entryActivity(): EntryActivityTableHandle {
    return new EntryActivityTableHandle(this.connection.clientCache.getOrCreateTable<EntryActivity>(REMOTE_MODULE.tables.EntryActivity));
  }

  get user(): UserTableHandle {
    return new UserTableHandle(this.connection.clientCache.getOrCreateTable<User>(REMOTE_MODULE.tables.User));
  }
}

export class SubscriptionBuilder extends SubscriptionBuilderImpl<RemoteTables, RemoteReducers, SetReducerFlags> { }

export class DbConnection extends DbConnectionImpl<RemoteTables, RemoteReducers, SetReducerFlags> {
  static builder = (): DbConnectionBuilder<DbConnection, ErrorContext, SubscriptionEventContext> => {
    return new DbConnectionBuilder<DbConnection, ErrorContext, SubscriptionEventContext>(REMOTE_MODULE, (imp: DbConnectionImpl) => imp as DbConnection);
  }
  subscriptionBuilder = (): SubscriptionBuilder => {
    return new SubscriptionBuilder(this);
  }
}

export type EventContext = EventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags, Reducer>;
export type ReducerEventContext = ReducerEventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags, Reducer>;
export type SubscriptionEventContext = SubscriptionEventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags>;
export type ErrorContext = ErrorContextInterface<RemoteTables, RemoteReducers, SetReducerFlags>;
